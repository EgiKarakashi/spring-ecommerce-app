server.port=7083
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/media
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.application.name=media
spring.threads.virtual.enabled=true
management.tracing.sampling.probability=1.0
management.endpoints.web.exposure.include=prometheus
management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.metrics.tags.application=${spring.application.name}
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://identity/realms/Ecommerce
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Hibernate ddl auto (none, create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=none
#Enable liquibase
spring.liquibase.enabled=true
ecommerce.publicUrl=http://localhost:7083
# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui
springdoc.packagesToScan=com.ecommerce.app.media
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.client-id=swagger-ui
springdoc.oauthflow.authorization-url=http://identity/realms/Ecommerce/protocol/openid-connect/auth
springdoc.oauthflow.token-url=http://identity/realms/Ecommerce/protocol/openid-connect/token
file.directory=src/main/resources/images/
cors.allowed-origins=*
